openapi: 3.0.0
info:
  title: Item Exchange Network API
  version: 1.0.0

paths:

  /account/signup:
    post:
      tags: [account]
      summary: User signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the user
                email:
                  type: string
                  format: email
                  description: The email address for the new account
                password:
                  type: string
                  description: The password for the new account
                  minLength: 8
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: Account created
        '400':
          description: Invalid request payload
        '409':
          description: Email already exists

  /account/create-external-token:
    post:
      tags: [ account ]
      security:
        - bearerAuth: [ ]
      summary: Create an External token for external stores integration
      responses:
        '200':
          description: Token created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The new JWT token

  /account/login:
    post:
      tags: [account]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address for login
                password:
                  type: string
                  description: The password for login
              required:
                - email
                - password

      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the user
                  email:
                    type: string
                    format: email
                    description: The email address of the user

  /products/purchased:
    get:
      tags: [products]
      security:
        - bearerAuth: []
      summary: Get products purchased by the current user
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/Product'
          description: List of purchased products

  /products/{id}:
    get:
      tags: [products]
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Product ID
                  name:
                    type: string
                    description: Product name
                  price:
                    type: number
                    format: float
                    description: Product price
                  picture_url:
                    type: string
                    description: Product picture URL
                  description:
                    type: string
          description: Product details

    put:
      tags: [products]
      security:
        - bearerAuth: []
      summary: Update product by ID (If the user is the owner)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated

    delete:
      tags: [products]
      security:
        - bearerAuth: []
      summary: Delete product by ID (If the user is the owner)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted
        '403':
          description: Unauthorized to delete this product

  /products/analytics:
    get:
      tags: [products]
      security:
        - bearerAuth: []
      summary: Get product analytics
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_products:
                    type: integer
                    description: Total number of products
                  total_selling_products:
                    type: integer
                    description: Total number of products being sold
                  total_purchased_products:
                    type: integer
                    description: Total number of products purchased
          description: Product analytics

  /products/selling:
    get:
      tags: [products]
      security:
        - bearerAuth: []
      summary: List products current user is selling
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/Product'
          description: Selling products list

    post:
      tags: [ products ]
      security:
        - bearerAuth: []
      summary: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/Product'
      responses:
        '201':
          description: Product created

  /products:
    get:
      tags: [products]
      summary: Get the product feed
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
            description: Search query for products
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/Product'
          description: Feed list

  /products/buy/{id}:
    post:
      tags: [products]
      security:
        - bearerAuth: []
      summary: Buy a product by ID (Transfer money from wallet, Update stock)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Created transaction session (For payment gateway)
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: The ID of the payment session
        '409':
          description: Product already purchased

  /e-wallet:
    get:
      tags: [money]
      security:
        - bearerAuth: []
      summary: Get wallet details
      responses:
        '200':
          content:
            application/json:
              schema:
                  '$ref': '#/components/schemas/Wallet'
          description: Wallet info

    post:
      tags: [money]
      security:
        - bearerAuth: []
      summary: Add money to wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: The amount to add to the wallet
              required:
                - amount
      responses:
        '200':
          description: Created payment session (For payment gateway)
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: The ID of the payment session

  /e-wallet/transactions:
    get:
      tags: [money]
      security:
        - bearerAuth: []
      summary: Get transaction history
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                '$ref': '#/components/schemas/Transaction'
          description: List of transactions

  /auth/verify-token:
    post:
      tags: [authentication]
      summary: Verify JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The JWT token to verify
              required:
                - token
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Whether the token is valid or not
                  user:
                    type: string
                    description: The user ID associated with the token (if valid)
                  error:
                    type: string
                    description: Error message if the token is invalid

  /auth/create-token:
    post:
      tags: [authentication]
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            description: The user ID for whom to create the token
      summary: Create a new JWT token for user (private API)
      responses:
        '200':
          description: Token created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The new JWT token

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT Bearer token'
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
          description: The name of the product
        price:
          type: number
          format: float
          description: The price of the product
        picture_url:
          type: string
          description: The URL of the product picture
        description:
          type: string
          description: The description of the product
    Wallet:
      type: object
      properties:
        balance:
          type: number
          format: float
          description: The current balance in the wallet
    Transaction:
      type: object
      description: Simple two-sided transaction
      properties:
        id:
          type: string
          description: Transaction ID
        amount:
          type: number
          format: float
          description: Transaction amount
        date:
          type: string
          format: date-time
          description: Transaction date and time
        credit:
          type: number
          description: User ID of the person who made the transaction (service account id for external Bank)
        debit:
          type: number
          description: User ID of the person who received the transaction
        done:
          type: boolean
          description: Whether the transaction is completed

